


Ref : http://crockford.com/

--------------------------------------------------------------------

 >js-into

    - client-side lang on browser-envi
    +
    - server-side lang on Node.js

--------------------------------------------------------------------
> js-features

   - dynamic
   - FP + OOP

   - IO operations are non-blocking 
   - single-threaded process

--------------------------------------------------------------------   

> ECMAScript comminity

    -> official comminity defines spec for javascript lang

    latest spec : ES7

-------------------------------------------------------------------- 

How to run .js program?

    ==> using .js-runtime /engine

browser-envi

    - chrome  ( v8 => c++) 
    - firefox ( rhino/spider => java)
    - IE/Edge ( chakra )
    - Safari  ( Nitro )
    ... 

otner envi

    - Node.js ( v8 )
    - JVM     ( nashorn )
    - ...   

-------------------------------------------------------------------- 

"Hello World"

-------------------------------------------------------------------- 


----------------------------------------------------
JS core-topics  ( level-1 )
---------------

 1. data-types
 2. scopes / execution-contex
 3. FP
 4. OOP

 ----------------------------------------------------
 level-2  ( New syntax & APIs introduced in ES6 & ES7 )
----------------------------------------------------

  1. New syntax  ( in ES6 )

    - let & const keywords with block-scope
    - function with default & rest params
    - string interpolation  i.e ``
    - New way of OOP with 'class' syntax 
    - de-structuring
    - spread operator
    - obj-literal enhancements
    - arrow-function
    
    - symbols
    - iterators & generators
    - collections ( set & map )
    - New Apis 
    - JS modules
    - Concurrency Model & Non Blocking
    - Promise APIs 

----------------------------------------------


 what .js-lang can do in HTML-page in browser-envi?

    using browser provided APIs, 
    .js-programs can bring any dynamic data/behav to web-page
    
    browser provided APIs, ==> w3c recommendations
    all browser(s) impleted these APIs natively, and abstracted as .js objects & functions to us

    browser APIs ==>  DOM,XHR,Timer,..

    using DOM API
    --------------
    -> to create,retreive,update,delete HTML-element/tag/component
    -> to change element's inner HTML/text content
    -> to change element's style
    -> to change element's properties/attributes
    -> to listen event(s) on elements
    -> to validate form-fields before submit
    -> to create rich-UI components like auto-complete,date-picker,...
    .........

    using Timer API
    -------------------
    -> to execute any actions on time out/interval

    using XHR API
    -------------
    -> to communicate with server-side programs async


    




        