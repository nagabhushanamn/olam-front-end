


Ref : http://crockford.com/

--------------------------------------------------------------------

 >js-into

    - client-side lang on browser-envi
    +
    - server-side lang on Node.js

--------------------------------------------------------------------
> js-features

   - dynamic
   - FP + OOP

   - IO operations are non-blocking 
   - single-threaded process

--------------------------------------------------------------------   

> ECMAScript comminity

    -> official comminity defines spec for javascript lang

    latest spec : ES7

-------------------------------------------------------------------- 

How to run .js program?

    ==> using .js-runtime /engine

browser-envi

    - chrome  ( v8 => c++) 
    - firefox ( rhino/spider => java)
    - IE/Edge ( chakra )
    - Safari  ( Nitro )
    ... 

otner envi

    - Node.js ( v8 )
    - JVM     ( nashorn )
    - ...   

-------------------------------------------------------------------- 

"Hello World"

-------------------------------------------------------------------- 


----------------------------------------------------
JS core-topics  ( level-1 )
---------------

 1. data-types
 2. scopes / execution-contex
 3. FP
 4. OOP

 ----------------------------------------------------
 level-2  ( New syntax & APIs introduced in ES6 & ES7 )
----------------------------------------------------

  1. New syntax  ( in ES6 )

    - let & const keywords with block-scope
    - function with default & rest params
    - string interpolation  i.e ``
    - New way of OOP with 'class' syntax 
    - de-structuring
    - spread operator
    - obj-literal enhancements
    - arrow-function
    - symbols
    - iterators & generators
    - for-of loop
    - collections ( set & map )
    - JS modules
    
    - Concurrency Model & Non Blocking IO
    - Promise APIs 

----------------------------------------------


 what .js-lang can do in HTML-page in browser-envi?

    using browser provided APIs, 
    .js-programs can bring any dynamic data/behav to web-page
    
    browser provided APIs, ==> w3c recommendations
    all browser(s) impleted these APIs natively, and abstracted as .js objects & functions to us

    browser APIs ==>  DOM,XHR,Timer,..

    using DOM API
    --------------
    -> to create,retreive,update,delete HTML-element/tag/component
    -> to change element's inner HTML/text content
    -> to change element's style
    -> to change element's properties/attributes
    -> to listen event(s) on elements
    -> to validate form-fields before submit
    -> to create rich-UI components like auto-complete,date-picker,...
    .........

    using Timer API
    -------------------
    -> to execute any actions on time out/interval

    using XHR API
    -------------
    -> to communicate with server-side programs async

    using HTML5 APIs


   -----------------------------------------------------------------------------

    plain-js with browser-apis : problems
    -------------------------------------

    -> browser compatability issues
    -> memory issues shud take care manually ( i.e clean un-used DOM elements )
    -> performance issues shud consider ( i.e minimal DOM access will give greater performance)
    -> data-binding is manual  ( 50% of our work here only)
    -> too much code even for simple operation
    -> code oraganization is very difficult

    past-soln : using server-side page-technologies

        e.g JSP , ASP.NET , PHP , etc...

    problems with server-side page techonologies

    -> on every req, server-side programs shud re-generate same UI layout with new context , keeping client state     
    -> on every resp, server will txr same resources again and again , increate n/w bandwidth
    -> on every resp, browser re-load current page
    

    best-soln :  using browser-side page technologies with third-party .js lib and F.Ws


    some .js lib and F.Ws

     1. jQuery

          -> provides utility methods for DOM & XHR acroos browser

     MVC / MVVM based .js lib & F.Ws

     1. backbone.js / marionet.js 
     2. knockout.js
     3. angular.js   ==> google-team
     4. ember.js
     5. dojo
     6. extjs
     ..........

     component based arctecture lib & F.W      

     1. react.js
     2. angular   ( our course )   ==> dynamic UI   + third-party UI comps ( kendo UI)
     3. vue
     4. polymer
     ...

     


   -----------------------------------------------------------------------------

    .js-development without module-standards  & module-loader

    -> global-naming collisions
        soln : using self-executable function with single global
    -> loading dependency modules in order is manual


    soln :

      from third-parties , we got some module-standards & loaders  
        1- AMD ( Async Module Definition )
        2- commonJS
        3- UMD
        ........


    ---------------------------------------------------------
    commonJS module-standard
    ---------------------------------------------------------

    rules
        --> every .js file is module by default
        --> all var & functions in .js file are private by default
        --> to abstract/export any members, use 'module.exports' object
        --> to require/import any module , use 'require()' function
        --> group related modules into package with description file ( package.json )

        imp-note : Node.js runtime already implemented this as default module standard;
    ---------------------------------------------------------


    NPM ( Node package Manager )  - tool
        
        - cli tool
        - runs on Node.js  , + part of Node.js runtime

        why we need ?
        ==> to publish/install .js-packages to/from NPM-repository
        ==> to manage build life-cycle

    ---------------------------------------------------------
    ES module-standard  ( from Es6)
    ---------------------------------------------------------

    rules

        --> every .js file is module by default
        --> all var & functions in .js file are private by default
        --> to abstract/export any members, use 'export' keyword
        --> to require/import any module , use 'import' keyword
        --> group related modules into package with description file ( package.json )

    ---------------------------------------------------------

    while developing Front-End appliation,

    Why Do We Need a Build?
        
        Combining Files
        Minifying Files
        Maintaining File Order
        Transpilation
        Linting
  
        how to build ?
            => we need some automation tools

            e.g

                - grunt
                - gulp
                - brunch
                ....

                - webpack  ==> module bundler + loader for front-end application

     ---------------------------------------------------------------


     web-starter-kit 
     ---------------

     steps

     > npm init
     > npm i --save-dev webpack webpack-cli style-loader css-loader html-webpack-plugin
     > npm install webpack-dev-server --save-dev
     > create 'webpack.config.js' file on project directory

     > npm i --save bootstrap 