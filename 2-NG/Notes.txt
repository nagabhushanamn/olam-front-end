

------------------------------------------------------------
> ng new <project-name>
> cd <project-name>

> npm i bootstrap --save

- import bootstrap css in 'styles.css'
- update app.component.html file as you need

> npm start (or) ng serve --open --port=8080


------------------------------------------------------------
NG - data-binding
------------------------------------------------------------

 4 ways

 1. interpolation   ==> component's class -> component's template

    syntax:   

              {{expression}}   

 2. property binding ==> component's class -> component's template

    syntax:
              <element [prop]="expression" />  

 3. event binding    ==> component's template --> component's class

    syntax:

            <element (event-name)="handler()"/>

------------------------------------------------------------
NG - directives ==> they provide dynamic behav to template
------------------------------------------------------------

1. structural-directives

    => to change template structure

    e.g 
    
       *ngFor
       *ngIf

2. attribute-directives

    => to change element attributes 

    e.g ngClass      


------------------------------------------------------------
NG -  mult-components / inter-component communication
------------------------------------------------------------


    - parent-component communicates with chils by 'input' propeties
    - child-component communicates with parent by 'output' propeties by emitting events



------------------------------------------------------------
NG -  Form Management
------------------------------------------------------------

    how ?
    
    using 

    - Reactive-Forms Module  ( most advanced  approach )

  steps:
     
     step-1: import 'ReactiveFormsModule' to your angular-module
     step-2: create form-group with form-controls in component's class
     step-3: bind form-group & form-controls to relevant form & fields  in template

     FormGroup :
        
        ==> contains form's state & model

        form-states

            - pristine
            - dirty

            - invalid
            - valid

            - untouched
            - touched

        form-model

            - formGroup.value   

------------------------------------------------------------

// to start with new keno-angular applications


> ng new <project-name> --style=scss
> cd <project-name>

> npm i bootstrap --save
   pdate global style file
   @import "~bootstrap/scss/bootstrap";

for browser in-memory web-api
> npm i angular-in-memory-web-api --save-dev
> ng g s InMemProductAPI
    - define createDb method & return sample products

install kendoUI
> ng add @progress/kendo-angular-grid
> npm install --save @progress/kendo-theme-default
  update global style file
    @import "~@progress/kendo-theme-default/scss/all";

> ng g s Product
    with loadProducts()

> update app.component with kendo-grid component
